using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Text;

namespace ScriptWriter {
    public class Instruction : INotifyPropertyChanged {
        
        public event PropertyChangedEventHandler PropertyChanged;

        [Category("Other information"), Description("The file address of the instruction at load time."), ReadOnly(true)]
        public string Address { get; set; }

        [Browsable(false)]
        public List<byte> Bytes { get; private set; }

        [Category("Other information"), ReadOnly(true)]
        public string Description { get; private set; }

        [Category("Properties"), Browsable(false)]
        public int Length { get; private set; }

        [Category("Instruction Index"), Description("This byte signals what the instruction does."), TypeConverter(typeof(MyHexConverter))]
        public virtual byte Opcode
        {
            get
            {
                return _opcode;
            }
            set
            {
                if (IsUndefinedBehaviour(value)) throw new ArgumentException("This opcode could result in undefined behaviour. Please select a valid opcode for this instruction type.");
                if (value != _opcode)
                {
                    _opcode = value;
                    OnPropertyChanged("Opcode");
                }
            }
        }
        private byte _opcode;

        [Category("Properties"), Description("The instruction displayed in hexadecimal as stored in the ROM."), ReadOnly(true)]
        public string RawHex { get; private set; }

        [Category("Properties"),Description("Whether the instruction is a Condition or an Action."),ReadOnly(true)]
        public InstructionType Type { get; private set; }
        
        // A specific instruction generated by reading bytes from the ROM.
        public Instruction (List<byte> bytes, InstructionType type)
        {
            Type = type;
            Opcode = bytes[0];
            Length = (type == InstructionType.Condition) ? 4 : G.GetInstructionLength(Opcode);
            Description = (type == InstructionType.Condition) ? G.GetConditionDescription(Opcode) : G.GetActionDescription(Opcode);
            Bytes = bytes;
            UpdateRawHex(bytes);
        }

        // A generic instruction for the factory to use.
        public Instruction (byte opcode, InstructionType type)
        {
            Type = type;
            Opcode = opcode;
            Length = (type == InstructionType.Condition) ? 4 : G.GetInstructionLength(Opcode);
            Description = (type == InstructionType.Condition) ? G.GetConditionDescription(Opcode) : G.GetActionDescription(Opcode);
            // Except for the opcode, all values in the instruction are initialized to zero.
            Bytes = new List<byte>(new byte[Length]) { [0] = Opcode };
            UpdateRawHex(Bytes);
        }

        // Constructor for the End instructions to attach to the terminal TreeNodes.
        public Instruction()
        {
            Type = InstructionType.Other;
            Opcode = 0xFF;
            Length = 1;
            Description = "Signals the end of a script section.";
            Bytes = new List<byte>(new byte[Length]) { [0] = Opcode };
            UpdateRawHex(Bytes);
        }

        public enum InstructionType {
            Condition,
            Action,
            Other
        }

        protected virtual void UpdateRawHex(List<byte> bytes)
        {
            var sb = new StringBuilder();
            foreach (var cell in bytes) sb.Append(G.HexStr(cell)).Append(" ");
            RawHex = sb.ToString();
        }

        protected virtual void OnPropertyChanged(string propertyName)
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
        }

        protected virtual bool IsUndefinedBehaviour(byte opcode)
        {
            bool isUndefined = false;
            if ((Type == InstructionType.Condition) && ((opcode == 0x0D) || (opcode == 0x0E) || (opcode == 0x0F) || (opcode == 0x14) || (opcode == 0x16) || (opcode == 0x19) || (opcode == 0x1C) || (opcode == 0x1D) || (opcode == 0x1E) || (opcode == 0x21) || (opcode == 0x22) || (opcode > 0x28)))
            {
                isUndefined = true;
            }
            if ((Type == InstructionType.Action) && ((opcode == 0x03) || (opcode == 0x05) || (opcode == 0x06) || (opcode == 0x08) || (opcode == 0x09) || (opcode == 0x0E) || (opcode == 0x13) || (opcode > 0x16)))
            {
                isUndefined = true;
            }
            return isUndefined;
        }
    }
}
